class fRekeningBank:
  def __init__(self, formObj, parentForm, mode):
    self.app = formObj.ClientApplication
    self.ObjectAccess = self.app.GetClientClass("ClientObjectAccess", "ObjectAccess")()
    self.mode = mode
    self.ParamDisplay = {
    'New':'self.DisplayNew()',
    'Edit':'self.DisplayEdit()',
    'View':'self.DisplayView()',
    'SENTINEL':''
    }

  def DisplayNew(self) :
    self.uipData.Edit()
    self.uipData.Status = 'A'
    #self.FormObject.GetPanelByName('pData').GetControlByName(self.uipData.ID+'ID').Visible = 0
    self.uipData.Balance = 0.0
    self.uipData.AccountNoID = '<AUTOGENERATED>'
    

  def DisplayEdit(self) :
    self.FormObject.GetPanelByName('pData').GetControlByName(self.uipData.ID+'ID').ReadOnly = 1

  def DisplayView(self) :
    self.FormObject.SetAllControlsReadOnly()
    self.pAction_bOK.Enabled = 1
    self.pAction_bClose.Visible = 0
    self.pAction_bOK.Caption = '&Close'
    self.pAction_bOK.Cancel = 1
    
  def FormShow(self, mode) :
    eval(self.ParamDisplay[mode])
    self.FormContainer.Show()
    
  def BranchAfterLookup(self,sender,linkUI):
    uipData = self.uipData
    uipData.Edit()
    uipData.BranchCode = uipData.GetFieldValue("LBranch.Kode_Cabang")
    
  def CurrencyAfterLookup(self,sender,linkUI):
    uipData = self.uipData
    uipData.Edit()
    uipData.CurrencyCode = uipData.GetFieldValue("LCurrency.Currency_Code")

  def GLAfterLookup(self,sender,linkUI):
    uipData = self.uipData
    uipData.Edit()
    uipData.AccountInterface = uipData.GetFieldValue("LGLInterface.Account_Code")

  def BankAfterLookup(self,sender,linkUI):
    uipData = self.uipData
    uipData.Edit()
    uipData.BankCode = uipData.GetFieldValue("LBank.BankCode")
    uipData.BankName = uipData.GetFieldValue("LBank.BankShortName")
    
  def CheckInput(self):
    uipData = self.uipData
    
    if len(uipData.BankAccountNo) < 8 :
      self.pData_BankAccountNo.SetFocus()
      raise 'PERINGATAN','Nomor Rekening Bank Belum Diinput\Tidak Valid'

    uipData.Edit()
    uipData.BankCode = uipData.GetFieldValue("LBank.BankCode")
    if uipData.BankCode in ['',None] :
      self.pData_LBank.SetFocus()
      raise 'PERINGATAN','Nama Bank Belum Dipilih\Tidak Valid'
    
    uipData.BranchCode = uipData.GetFieldValue("LBranch.Kode_Cabang")
    if uipData.BranchCode in ['',None] :
      self.pData_LBranch.SetFocus()
      raise 'PERINGATAN','Kode Cabang Belum Dipilih\Tidak Valid'
      
    uipData.CurrencyCode = uipData.GetFieldValue("LCurrency.Currency_Code")
    if uipData.CurrencyCode in ['',None] :
      self.pData_LCurrency.SetFocus()
      raise 'PERINGATAN','Kode Valuta Belum Dipilih\Tidak Valid'
      
    uipData.AccountInterface = uipData.GetFieldValue("LGLInterface.Account_Code")
    if uipData.AccountInterface in ['',None] :
      self.pData_LGLInterface.SetFocus()
      raise 'PERINGATAN','Kode GL Interface Belum Dipilih\Tidak Valid'

    
    self.FormObject.CommitBuffer()
    
  def bOKClick(self, sender):
  
    if self.pAction_bClose.Visible :
      uipData = self.uipData
      uipData.Edit()
      uipData.AccountInterface = uipData.GetFieldValue("LGLInterface.Account_Code")
      self.FormObject.CommitBuffer()
      self.CheckInput()
      #self.FormObject.PostResult()
      ph = self.FormObject.CallServerMethod('SimpanData',self.FormObject.GetDataPacket())
      status = ph.FirstRecord
      if status.Is_Err == 1 : raise 'ERROR', status.Err_Message
      
    if self.mode == 'New' :
      self.ObjectAccess.ClearuipartData(self.uipData,('Status','mode','ID','OpeningDate'))
    else :
      sender.ExitAction = 1

